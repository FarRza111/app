"""Add blog posts table

Revision ID: 81d9609fffca
Revises: 4ec856300165
Create Date: 2024-11-23 19:35:07.583837

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '81d9609fffca'
down_revision: Union[str, None] = '4ec856300165'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Handle course_id conversion safely
    op.execute('ALTER TABLE enrollments ALTER COLUMN course_id TYPE INTEGER USING course_id::integer')
    
    # Add new columns to enrollments
    op.add_column('enrollments', sa.Column('student_id', sa.Integer(), nullable=True))
    op.add_column('enrollments', sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('enrollments', sa.Column('progress', sa.JSON(), nullable=True))
    
    # Update timestamps and foreign keys
    op.alter_column('enrollments', 'enrolled_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
               
    op.drop_constraint('enrollments_user_id_fkey', 'enrollments', type_='foreignkey')
    op.create_foreign_key(None, 'enrollments', 'courses', ['course_id'], ['id'])
    op.create_foreign_key(None, 'enrollments', 'users', ['student_id'], ['id'])
    op.drop_column('enrollments', 'user_id')

    # Update testimonials foreign key
    op.drop_constraint('testimonials_teacher_id_fkey', 'testimonials', type_='foreignkey')
    op.create_foreign_key(None, 'testimonials', 'teachers', ['teacher_id'], ['id'], ondelete='CASCADE')

    # Add new columns to users
    op.add_column('users', sa.Column('is_teacher', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('specialization', sa.String(), nullable=True))
    op.add_column('users', sa.Column('profile_image', sa.String(), nullable=True))
    op.add_column('users', sa.Column('years_of_experience', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('education', sa.String(), nullable=True))
    
    # Update user timestamps and bio
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('users', 'bio',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
               
    # Drop old columns
    op.drop_column('users', 'is_admin')
    op.drop_column('users', 'profile_picture')
    op.drop_column('users', 'social_links')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('social_links', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('profile_picture', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.alter_column('users', 'bio',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_column('users', 'education')
    op.drop_column('users', 'years_of_experience')
    op.drop_column('users', 'profile_image')
    op.drop_column('users', 'specialization')
    op.drop_column('users', 'is_teacher')
    op.drop_constraint(None, 'testimonials', type_='foreignkey')
    op.create_foreign_key('testimonials_teacher_id_fkey', 'testimonials', 'users', ['teacher_id'], ['id'], ondelete='CASCADE')
    op.add_column('enrollments', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'enrollments', type_='foreignkey')
    op.drop_constraint(None, 'enrollments', type_='foreignkey')
    op.create_foreign_key('enrollments_user_id_fkey', 'enrollments', 'users', ['user_id'], ['id'])
    op.alter_column('enrollments', 'enrolled_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('enrollments', 'progress')
    op.drop_column('enrollments', 'completed_at')
    op.drop_column('enrollments', 'student_id')
    op.alter_column('enrollments', 'course_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    # ### end Alembic commands ###
