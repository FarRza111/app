"""add_author_id_to_courses

Revision ID: 9cd47a7d63fb
Revises: baa036ff4db3
Create Date: 2024-11-23 20:02:36.171467

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9cd47a7d63fb'
down_revision: Union[str, None] = 'baa036ff4db3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, handle the blog_posts table changes
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    blog_posts_columns = [c['name'] for c in inspector.get_columns('blog_posts')]
    
    if 'author_id' not in blog_posts_columns:
        op.add_column('blog_posts', sa.Column('author_id', sa.Integer(), nullable=True))
    if 'published' not in blog_posts_columns:
        op.add_column('blog_posts', sa.Column('published', sa.Boolean(), nullable=True))
    if 'featured_image' not in blog_posts_columns:
        op.add_column('blog_posts', sa.Column('featured_image', sa.String(), nullable=True))
    
    # Check if index exists before creating it
    blog_posts_indexes = [i['name'] for i in inspector.get_indexes('blog_posts')]
    if 'ix_blog_posts_title' not in blog_posts_indexes:
        op.create_index(op.f('ix_blog_posts_title'), 'blog_posts', ['title'], unique=False)
    
    # Handle foreign key constraints if they exist
    for fk in inspector.get_foreign_keys('blog_posts'):
        if fk['referred_table'] == 'teachers':
            op.drop_constraint(fk['name'], 'blog_posts', type_='foreignkey')
    
    # Create new foreign key if it doesn't exist
    fks = [fk['name'] for fk in inspector.get_foreign_keys('blog_posts')]
    if not any(fk.endswith('author_id_fkey') for fk in fks):
        op.create_foreign_key(None, 'blog_posts', 'users', ['author_id'], ['id'])
    
    # Drop old columns if they exist
    for column in ['summary', 'image_url', 'teacher_id', 'is_published']:
        if column in blog_posts_columns:
            op.drop_column('blog_posts', column)
    
    # Handle courses table changes
    courses_columns = [c['name'] for c in inspector.get_columns('courses')]
    if 'author_id' not in courses_columns:
        op.add_column('courses', sa.Column('author_id', sa.Integer(), nullable=True))
    
    # Handle foreign key constraints for courses
    for fk in inspector.get_foreign_keys('courses'):
        if fk['referred_table'] == 'teachers':
            op.drop_constraint(fk['name'], 'courses', type_='foreignkey')
    
    # Create new foreign key for courses if it doesn't exist
    fks = [fk['name'] for fk in inspector.get_foreign_keys('courses')]
    if not any(fk.endswith('author_id_fkey') for fk in fks):
        op.create_foreign_key(None, 'courses', 'users', ['author_id'], ['id'])
    
    if 'teacher_id' in courses_columns:
        op.drop_column('courses', 'teacher_id')
    
    # Handle testimonials table changes
    for fk in inspector.get_foreign_keys('testimonials'):
        if fk['referred_table'] == 'teachers':
            op.drop_constraint(fk['name'], 'testimonials', type_='foreignkey')
    
    testimonials_columns = [c['name'] for c in inspector.get_columns('testimonials')]
    if 'teacher_id' in testimonials_columns:
        op.drop_column('testimonials', 'teacher_id')
    
    # Drop tables if they exist
    tables = inspector.get_table_names()
    if 'user_progress' in tables:
        # Check if index exists before dropping
        user_progress_indexes = [i['name'] for i in inspector.get_indexes('user_progress')]
        if 'ix_user_progress_id' in user_progress_indexes:
            op.drop_index('ix_user_progress_id', table_name='user_progress')
        op.drop_table('user_progress')
    
    if 'calendar_availability' in tables:
        # Check if index exists before dropping
        calendar_indexes = [i['name'] for i in inspector.get_indexes('calendar_availability')]
        if 'ix_calendar_availability_id' in calendar_indexes:
            op.drop_index('ix_calendar_availability_id', table_name='calendar_availability')
        op.drop_table('calendar_availability')
    
    if 'comments' in tables:
        # Check if index exists before dropping
        comments_indexes = [i['name'] for i in inspector.get_indexes('comments')]
        if 'ix_comments_id' in comments_indexes:
            op.drop_index('ix_comments_id', table_name='comments')
        op.drop_table('comments')
    
    if 'teachers' in tables:
        # Check if indexes exist before dropping
        teachers_indexes = [i['name'] for i in inspector.get_indexes('teachers')]
        if 'ix_teachers_full_name' in teachers_indexes:
            op.drop_index('ix_teachers_full_name', table_name='teachers')
        if 'ix_teachers_id' in teachers_indexes:
            op.drop_index('ix_teachers_id', table_name='teachers')
        op.drop_table('teachers')
    
    # Update users table
    users_columns = [c['name'] for c in inspector.get_columns('users')]
    for column in ['years_of_experience', 'education', 'is_teacher', 'specialization']:
        if column in users_columns:
            op.drop_column('users', column)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('specialization', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_teacher', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('education', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('years_of_experience', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('testimonials', sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('testimonials_teacher_id_fkey', 'testimonials', 'teachers', ['teacher_id'], ['id'], ondelete='CASCADE')
    op.add_column('courses', sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'courses', type_='foreignkey')
    op.create_foreign_key('courses_teacher_id_fkey', 'courses', 'teachers', ['teacher_id'], ['id'])
    op.drop_column('courses', 'author_id')
    op.add_column('blog_posts', sa.Column('is_published', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('blog_posts', sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('blog_posts', sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('blog_posts', sa.Column('summary', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'blog_posts', type_='foreignkey')
    op.create_foreign_key('blog_posts_teacher_id_fkey', 'blog_posts', 'users', ['teacher_id'], ['id'], ondelete='CASCADE')
    # Check if index exists before dropping
    blog_posts_indexes = [i['name'] for i in inspector.get_indexes('blog_posts')]
    if 'ix_blog_posts_title' in blog_posts_indexes:
        op.drop_index('ix_blog_posts_title', table_name='blog_posts')
    op.drop_column('blog_posts', 'featured_image')
    op.drop_column('blog_posts', 'published')
    op.drop_column('blog_posts', 'author_id')
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('blog_post_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('author_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['blog_post_id'], ['blog_posts.id'], name='comments_blog_post_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], name='comments_parent_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    # Check if index exists before creating
    comments_indexes = [i['name'] for i in inspector.get_indexes('comments')]
    if 'ix_comments_id' not in comments_indexes:
        op.create_index('ix_comments_id', 'comments', ['id'], unique=False)
    op.create_table('calendar_availability',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_time', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('end_time', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['users.id'], name='calendar_availability_teacher_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='calendar_availability_pkey')
    )
    # Check if index exists before creating
    calendar_indexes = [i['name'] for i in inspector.get_indexes('calendar_availability')]
    if 'ix_calendar_availability_id' not in calendar_indexes:
        op.create_index('ix_calendar_availability_id', 'calendar_availability', ['id'], unique=False)
    op.create_table('teachers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linkedin_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('specializations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('years_of_experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('education', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('achievements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('teaching_philosophy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='teachers_pkey')
    )
    # Check if indexes exist before creating
    teachers_indexes = [i['name'] for i in inspector.get_indexes('teachers')]
    if 'ix_teachers_full_name' not in teachers_indexes:
        op.create_index('ix_teachers_full_name', 'teachers', ['full_name'], unique=False)
    if 'ix_teachers_id' not in teachers_indexes:
        op.create_index('ix_teachers_id', 'teachers', ['id'], unique=False)
    op.create_table('user_progress',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('module_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_progress_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_progress_pkey')
    )
    # Check if index exists before creating
    user_progress_indexes = [i['name'] for i in inspector.get_indexes('user_progress')]
    if 'ix_user_progress_id' not in user_progress_indexes:
        op.create_index('ix_user_progress_id', 'user_progress', ['id'], unique=False)
    # ### end Alembic commands ###
